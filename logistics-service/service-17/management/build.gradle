plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.springcloud'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.1")
}

dependencies {
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//slack
	implementation 'com.slack.api:bolt:1.44.0'
	implementation 'com.slack.api:bolt-servlet:1.40.2'
	implementation 'com.slack.api:bolt-jetty:1.44.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

//	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
//	implementation 'io.github.openfeign:feign-micrometer'
//	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
}

sourceSets {
	main {
		java {
			srcDirs += "$buildDir/generated/querydsl"
		}
	}
}

tasks.register("cleanQuerydsl", Delete) {
	delete file("$buildDir/generated/querydsl")
}

tasks.named("compileJava") {
	dependsOn tasks.named("cleanQuerydsl")
}
