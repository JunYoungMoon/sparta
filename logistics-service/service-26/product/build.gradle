plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.epages.restdocs-api-spec") version "0.19.4"
}

group = 'takeoff.logistics-service.msa'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('querydslVersion', "5.0.0")
}

dependencies {
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.github.openfeign:feign-micrometer'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    //DB
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation project(':common')
    //DOCS
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'


    //prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    
    //CONFIG
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}

// 컴파일 시 빌드 폴더를 지웁니다.
compileJava {
    dependsOn 'clean'
}

// OpenApi에 들어갈 메타데이터를 추가합니다.
// 모놀리식일 경우 해당 프로젝트의 주소를 입력하고,
// MSA일 경우 게이트웨이의 주소를 입력하면 됩니다.
openapi3 {
    server = 'http://localhost:19000'
    title = 'PRODUCT API'
    description = '상품 및 재고에 관련된 api 문서 입니다'
    version = '1.0.0'
    format = 'json'
    tagDescriptionsPropertiesFile = 'src/docs/tag-descriptions.yaml'

    separatePublicApi = true
}

tasks.register('setDocs') {
    dependsOn 'openapi3'
    doLast {
        copy {
            from "build/api-spec"
            include "*.json"
            include "*.yaml"
            into "build/resources/main/static/springdoc"
            rename { String fileName ->
                if (fileName.endsWith('.json')) {
                    return fileName.replace('.json', '-product-service.json')
                } else if (fileName.endsWith('.yaml')) {
                    return fileName.replace('.yaml', '-product-service.yml')
                }
                return fileName
            }
        }
    }
}

// bootRun 실행 시 문서 생성 태스크를 실행합니다
bootRun {
    dependsOn 'setDocs'
    workingDir = rootProject.projectDir
}


// bootJar 실행 시 문서 생성 태스크를 실행합니다.
bootJar {
    dependsOn 'setDocs'
}

tasks.named('test') {
    useJUnitPlatform()
}
