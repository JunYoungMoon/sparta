plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.ana29'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// ✅ QueryDSL 설정 추가
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/querydsl"
        }
    }
}

tasks.register("cleanQuerydsl", Delete) {
    delete file("$buildDir/generated/querydsl")
}

tasks.named("compileJava") {
    dependsOn tasks.named("cleanQuerydsl")
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    // ✅ QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // ✅ JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // ✅ JSON
    implementation 'org.json:json:20231013'

    // ✅ Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // ✅ Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // ✅ OpenFeign (Spring Cloud)
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // ✅ Spring Boot 기본 스타터
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework:spring-context'

    // ✅ Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ✅ PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // ✅ 테스트 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // ✅ Elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // ✅ OpenSearch
    implementation 'org.opensearch.client:opensearch-java:2.11.1'
    implementation 'org.opensearch.client:opensearch-rest-client:2.19.0'

    // ✅ Spring RestDocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // ✅ Spring Boot Redis Starter (Spring Data Redis + 기본 클라이언트 Lettuce 포함)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // ✅ Date 타입 redis에 저장하기 위해 필요한 의존성
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'


    // ✅ (선택) Jedis 클라이언트를 사용하려면 추가
    implementation 'redis.clients:jedis:5.0.2'

    // ✅ (선택) Spring Cache와 함께 사용 시 필요
    implementation 'org.springframework.boot:spring-boot-starter-cache'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// ✅ RestDocs 설정
tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    configurations "asciidoctorExt"
    inputs.dir snippetsDir
    dependsOn test
}

// ✅ RestDocs를 정적 파일로 복사하는 태스크
tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("${buildDir}/docs/asciidoc") // ✅ 변경된 위치
    into file("src/main/resources/static/docs")
}

tasks.named('build') {
    dependsOn copyDocument
}

// ✅ BootJar 설정 (빌드시 RestDocs 포함)
tasks.named('bootJar') {
    dependsOn copyDocument
    from("${buildDir}/docs/asciidoc") {
        into 'src/main/resources/static/docs'
    }
}
